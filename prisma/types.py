# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


from typing_extensions import LiteralString
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List['Serializable'],
    Dict[None, 'Serializable'],
    Dict[bool, 'Serializable'],
    Dict[float, 'Serializable'],
    Dict[int, 'Serializable'],
    Dict[str, 'Serializable'],
]


StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilter'],
                'search': str,
    },
    total=False,
)



class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilter'],
    },
    total=False,
)



class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilter'],
    },
    total=False,
)



class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilter'],
    },
    total=False,
)



class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilter'],
    },
    total=False,
)



class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilter'],
    },
    total=False,
)



class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilter'],
    },
    total=False,
)



class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# categorias types

class categoriasOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the categorias create method"""
    id: _int
    usuario_id: Optional[_int]


class categoriasCreateInput(categoriasOptionalCreateInput):
    """Required arguments to the categorias create method"""
    nombre: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class categoriasOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the categorias create method, without relations"""
    id: _int
    usuario_id: Optional[_int]


class categoriasCreateWithoutRelationsInput(categoriasOptionalCreateWithoutRelationsInput):
    """Required arguments to the categorias create method, without relations"""
    nombre: _str

class categoriasConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'categoriasCreateWithoutRelationsInput'
    where: 'categoriasWhereUniqueInput'

class categoriasCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'categoriasCreateWithoutRelationsInput'
    connect: 'categoriasWhereUniqueInput'
    connect_or_create: 'categoriasConnectOrCreateWithoutRelationsInput'


class categoriasCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['categoriasCreateWithoutRelationsInput', List['categoriasCreateWithoutRelationsInput']]
    connect: Union['categoriasWhereUniqueInput', List['categoriasWhereUniqueInput']]
    connect_or_create: Union['categoriasConnectOrCreateWithoutRelationsInput', List['categoriasConnectOrCreateWithoutRelationsInput']]

_categoriasWhereUnique_id_Input = TypedDict(
    '_categoriasWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

categoriasWhereUniqueInput = _categoriasWhereUnique_id_Input


class categoriasUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    usuario_id: Optional[Union[AtomicIntInput, _int]]
    nombre: _str


class categoriasUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    usuario_id: Optional[Union[AtomicIntInput, _int]]
    nombre: _str


class categoriasUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['categoriasCreateWithoutRelationsInput']
    connect: List['categoriasWhereUniqueInput']
    connect_or_create: List['categoriasConnectOrCreateWithoutRelationsInput']
    set: List['categoriasWhereUniqueInput']
    disconnect: List['categoriasWhereUniqueInput']
    delete: List['categoriasWhereUniqueInput']

    # TODO
    # update: List['categoriasUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['categoriasUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['categoriasScalarWhereInput']
    # upsert: List['categoriasUpserteWithWhereUniqueWithoutRelationsInput']


class categoriasUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'categoriasCreateWithoutRelationsInput'
    connect: 'categoriasWhereUniqueInput'
    connect_or_create: 'categoriasConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'categoriasUpdateInput'
    # upsert: 'categoriasUpsertWithoutRelationsInput'


class categoriasUpsertInput(TypedDict):
    create: 'categoriasCreateInput'
    update: 'categoriasUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_categorias_id_OrderByInput = TypedDict(
    '_categorias_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_categorias_usuario_id_OrderByInput = TypedDict(
    '_categorias_usuario_id_OrderByInput',
    {
        'usuario_id': 'SortOrder',
    },
    total=True
)

_categorias_nombre_OrderByInput = TypedDict(
    '_categorias_nombre_OrderByInput',
    {
        'nombre': 'SortOrder',
    },
    total=True
)

_categorias_RelevanceInner = TypedDict(
    '_categorias_RelevanceInner',
    {
        'fields': 'List[categoriasScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_categorias_RelevanceOrderByInput = TypedDict(
    '_categorias_RelevanceOrderByInput',
    {
        '_relevance': '_categorias_RelevanceInner',
    },
    total=True
)

categoriasOrderByInput = Union[
    '_categorias_id_OrderByInput',
    '_categorias_usuario_id_OrderByInput',
    '_categorias_nombre_OrderByInput',
    '_categorias_RelevanceOrderByInput',
]



# recursive categorias types
# TODO: cleanup these types



categoriasRelationFilter = TypedDict(
    'categoriasRelationFilter',
    {
        'is': 'categoriasWhereInput',
        'is_not': 'categoriasWhereInput',
    },
    total=False,
)


class categoriasListRelationFilter(TypedDict, total=False):
    some: 'categoriasWhereInput'
    none: 'categoriasWhereInput'
    every: 'categoriasWhereInput'


class categoriasInclude(TypedDict, total=False):
    """categorias relational arguments"""


class categoriasIncludeFromcategorias(TypedDict, total=False):
    """Relational arguments for categorias"""


class categoriasArgsFromcategorias(TypedDict, total=False):
    """Arguments for categorias"""
    include: 'categoriasIncludeFromcategorias'


class FindManycategoriasArgsFromcategorias(TypedDict, total=False):
    """Arguments for categorias"""
    take: int
    skip: int
    order_by: Union['categoriasOrderByInput', List['categoriasOrderByInput']]
    where: 'categoriasWhereInput'
    cursor: 'categoriasWhereUniqueInput'
    distinct: List['categoriasScalarFieldKeys']
    include: 'categoriasIncludeFromcategorias'


class cuentasIncludeFromcategorias(TypedDict, total=False):
    """Relational arguments for categorias"""


class cuentasArgsFromcategorias(TypedDict, total=False):
    """Arguments for categorias"""
    include: 'cuentasIncludeFromcuentas'


class FindManycuentasArgsFromcategorias(TypedDict, total=False):
    """Arguments for categorias"""
    take: int
    skip: int
    order_by: Union['cuentasOrderByInput', List['cuentasOrderByInput']]
    where: 'cuentasWhereInput'
    cursor: 'cuentasWhereUniqueInput'
    distinct: List['cuentasScalarFieldKeys']
    include: 'cuentasIncludeFromcuentas'


class transaccionesIncludeFromcategorias(TypedDict, total=False):
    """Relational arguments for categorias"""


class transaccionesArgsFromcategorias(TypedDict, total=False):
    """Arguments for categorias"""
    include: 'transaccionesIncludeFromtransacciones'


class FindManytransaccionesArgsFromcategorias(TypedDict, total=False):
    """Arguments for categorias"""
    take: int
    skip: int
    order_by: Union['transaccionesOrderByInput', List['transaccionesOrderByInput']]
    where: 'transaccionesWhereInput'
    cursor: 'transaccionesWhereUniqueInput'
    distinct: List['transaccionesScalarFieldKeys']
    include: 'transaccionesIncludeFromtransacciones'


class usuariosIncludeFromcategorias(TypedDict, total=False):
    """Relational arguments for categorias"""


class usuariosArgsFromcategorias(TypedDict, total=False):
    """Arguments for categorias"""
    include: 'usuariosIncludeFromusuarios'


class FindManyusuariosArgsFromcategorias(TypedDict, total=False):
    """Arguments for categorias"""
    take: int
    skip: int
    order_by: Union['usuariosOrderByInput', List['usuariosOrderByInput']]
    where: 'usuariosWhereInput'
    cursor: 'usuariosWhereUniqueInput'
    distinct: List['usuariosScalarFieldKeys']
    include: 'usuariosIncludeFromusuarios'




FindManycategoriasArgs = FindManycategoriasArgsFromcategorias
FindFirstcategoriasArgs = FindManycategoriasArgsFromcategorias


class categoriasWhereInput(TypedDict, total=False):
    """categorias arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    usuario_id: Union[None, _int, 'types.IntFilter']
    nombre: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['categoriasWhereInput', List['categoriasWhereInput']]
    # but this causes mypy to hang :/
    AND: List['categoriasWhereInput']
    OR: List['categoriasWhereInput']
    NOT: List['categoriasWhereInput']



# aggregate categorias types


class categoriasScalarWhereWithAggregatesInput(TypedDict, total=False):
    """categorias arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    usuario_id: Union[_int, 'types.IntWithAggregatesFilter']
    nombre: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['categoriasScalarWhereWithAggregatesInput']
    OR: List['categoriasScalarWhereWithAggregatesInput']
    NOT: List['categoriasScalarWhereWithAggregatesInput']



class categoriasGroupByOutput(TypedDict, total=False):
    id: _int
    usuario_id: _int
    nombre: _str
    _sum: 'categoriasSumAggregateOutput'
    _avg: 'categoriasAvgAggregateOutput'
    _min: 'categoriasMinAggregateOutput'
    _max: 'categoriasMaxAggregateOutput'
    _count: 'categoriasCountAggregateOutput'


class categoriasAvgAggregateOutput(TypedDict, total=False):
    """categorias output for aggregating averages"""
    id: float
    usuario_id: float


class categoriasSumAggregateOutput(TypedDict, total=False):
    """categorias output for aggregating sums"""
    id: _int
    usuario_id: _int


class categoriasScalarAggregateOutput(TypedDict, total=False):
    """categorias output including scalar fields"""
    id: _int
    usuario_id: _int
    nombre: _str


categoriasMinAggregateOutput = categoriasScalarAggregateOutput
categoriasMaxAggregateOutput = categoriasScalarAggregateOutput


class categoriasMaxAggregateInput(TypedDict, total=False):
    """categorias input for aggregating by max"""
    id: bool
    usuario_id: bool
    nombre: bool


class categoriasMinAggregateInput(TypedDict, total=False):
    """categorias input for aggregating by min"""
    id: bool
    usuario_id: bool
    nombre: bool


class categoriasNumberAggregateInput(TypedDict, total=False):
    """categorias input for aggregating numbers"""
    id: bool
    usuario_id: bool


categoriasAvgAggregateInput = categoriasNumberAggregateInput
categoriasSumAggregateInput = categoriasNumberAggregateInput


categoriasCountAggregateInput = TypedDict(
    'categoriasCountAggregateInput',
    {
        'id': bool,
        'usuario_id': bool,
        'nombre': bool,
        '_all': bool,
    },
    total=False,
)

categoriasCountAggregateOutput = TypedDict(
    'categoriasCountAggregateOutput',
    {
        'id': int,
        'usuario_id': int,
        'nombre': int,
        '_all': int,
    },
    total=False,
)


categoriasKeys = Literal[
    'id',
    'usuario_id',
    'nombre',
]
categoriasScalarFieldKeys = Literal[
    'id',
    'usuario_id',
    'nombre',
]
categoriasScalarFieldKeysT = TypeVar('categoriasScalarFieldKeysT', bound=categoriasScalarFieldKeys)

categoriasRelationalFieldKeys = _NoneType

# cuentas types

class cuentasOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the cuentas create method"""
    id: _int
    usuario_id: Optional[_int]
    tipo: Optional[_str]
    es_personalizada: Optional[_bool]
    cuenta_base_id: Optional[_int]
    saldo_inicial: Optional[decimal.Decimal]
    fecha_creacion: Optional[datetime.datetime]
    descripcion: Optional[_str]


class cuentasCreateInput(cuentasOptionalCreateInput):
    """Required arguments to the cuentas create method"""
    nombre: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class cuentasOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the cuentas create method, without relations"""
    id: _int
    usuario_id: Optional[_int]
    tipo: Optional[_str]
    es_personalizada: Optional[_bool]
    cuenta_base_id: Optional[_int]
    saldo_inicial: Optional[decimal.Decimal]
    fecha_creacion: Optional[datetime.datetime]
    descripcion: Optional[_str]


class cuentasCreateWithoutRelationsInput(cuentasOptionalCreateWithoutRelationsInput):
    """Required arguments to the cuentas create method, without relations"""
    nombre: _str

class cuentasConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'cuentasCreateWithoutRelationsInput'
    where: 'cuentasWhereUniqueInput'

class cuentasCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'cuentasCreateWithoutRelationsInput'
    connect: 'cuentasWhereUniqueInput'
    connect_or_create: 'cuentasConnectOrCreateWithoutRelationsInput'


class cuentasCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['cuentasCreateWithoutRelationsInput', List['cuentasCreateWithoutRelationsInput']]
    connect: Union['cuentasWhereUniqueInput', List['cuentasWhereUniqueInput']]
    connect_or_create: Union['cuentasConnectOrCreateWithoutRelationsInput', List['cuentasConnectOrCreateWithoutRelationsInput']]

_cuentasWhereUnique_id_Input = TypedDict(
    '_cuentasWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

cuentasWhereUniqueInput = _cuentasWhereUnique_id_Input


class cuentasUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    usuario_id: Optional[Union[AtomicIntInput, _int]]
    nombre: _str
    tipo: Optional[_str]
    es_personalizada: Optional[_bool]
    cuenta_base_id: Optional[Union[AtomicIntInput, _int]]
    saldo_inicial: Optional[decimal.Decimal]
    fecha_creacion: Optional[datetime.datetime]
    descripcion: Optional[_str]


class cuentasUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    usuario_id: Optional[Union[AtomicIntInput, _int]]
    nombre: _str
    tipo: Optional[_str]
    es_personalizada: Optional[_bool]
    cuenta_base_id: Optional[Union[AtomicIntInput, _int]]
    saldo_inicial: Optional[decimal.Decimal]
    fecha_creacion: Optional[datetime.datetime]
    descripcion: Optional[_str]


class cuentasUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['cuentasCreateWithoutRelationsInput']
    connect: List['cuentasWhereUniqueInput']
    connect_or_create: List['cuentasConnectOrCreateWithoutRelationsInput']
    set: List['cuentasWhereUniqueInput']
    disconnect: List['cuentasWhereUniqueInput']
    delete: List['cuentasWhereUniqueInput']

    # TODO
    # update: List['cuentasUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['cuentasUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['cuentasScalarWhereInput']
    # upsert: List['cuentasUpserteWithWhereUniqueWithoutRelationsInput']


class cuentasUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'cuentasCreateWithoutRelationsInput'
    connect: 'cuentasWhereUniqueInput'
    connect_or_create: 'cuentasConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'cuentasUpdateInput'
    # upsert: 'cuentasUpsertWithoutRelationsInput'


class cuentasUpsertInput(TypedDict):
    create: 'cuentasCreateInput'
    update: 'cuentasUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_cuentas_id_OrderByInput = TypedDict(
    '_cuentas_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_cuentas_usuario_id_OrderByInput = TypedDict(
    '_cuentas_usuario_id_OrderByInput',
    {
        'usuario_id': 'SortOrder',
    },
    total=True
)

_cuentas_nombre_OrderByInput = TypedDict(
    '_cuentas_nombre_OrderByInput',
    {
        'nombre': 'SortOrder',
    },
    total=True
)

_cuentas_tipo_OrderByInput = TypedDict(
    '_cuentas_tipo_OrderByInput',
    {
        'tipo': 'SortOrder',
    },
    total=True
)

_cuentas_es_personalizada_OrderByInput = TypedDict(
    '_cuentas_es_personalizada_OrderByInput',
    {
        'es_personalizada': 'SortOrder',
    },
    total=True
)

_cuentas_cuenta_base_id_OrderByInput = TypedDict(
    '_cuentas_cuenta_base_id_OrderByInput',
    {
        'cuenta_base_id': 'SortOrder',
    },
    total=True
)

_cuentas_saldo_inicial_OrderByInput = TypedDict(
    '_cuentas_saldo_inicial_OrderByInput',
    {
        'saldo_inicial': 'SortOrder',
    },
    total=True
)

_cuentas_fecha_creacion_OrderByInput = TypedDict(
    '_cuentas_fecha_creacion_OrderByInput',
    {
        'fecha_creacion': 'SortOrder',
    },
    total=True
)

_cuentas_descripcion_OrderByInput = TypedDict(
    '_cuentas_descripcion_OrderByInput',
    {
        'descripcion': 'SortOrder',
    },
    total=True
)

_cuentas_RelevanceInner = TypedDict(
    '_cuentas_RelevanceInner',
    {
        'fields': 'List[cuentasScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_cuentas_RelevanceOrderByInput = TypedDict(
    '_cuentas_RelevanceOrderByInput',
    {
        '_relevance': '_cuentas_RelevanceInner',
    },
    total=True
)

cuentasOrderByInput = Union[
    '_cuentas_id_OrderByInput',
    '_cuentas_usuario_id_OrderByInput',
    '_cuentas_nombre_OrderByInput',
    '_cuentas_tipo_OrderByInput',
    '_cuentas_es_personalizada_OrderByInput',
    '_cuentas_cuenta_base_id_OrderByInput',
    '_cuentas_saldo_inicial_OrderByInput',
    '_cuentas_fecha_creacion_OrderByInput',
    '_cuentas_descripcion_OrderByInput',
    '_cuentas_RelevanceOrderByInput',
]



# recursive cuentas types
# TODO: cleanup these types



cuentasRelationFilter = TypedDict(
    'cuentasRelationFilter',
    {
        'is': 'cuentasWhereInput',
        'is_not': 'cuentasWhereInput',
    },
    total=False,
)


class cuentasListRelationFilter(TypedDict, total=False):
    some: 'cuentasWhereInput'
    none: 'cuentasWhereInput'
    every: 'cuentasWhereInput'


class cuentasInclude(TypedDict, total=False):
    """cuentas relational arguments"""


class categoriasIncludeFromcuentas(TypedDict, total=False):
    """Relational arguments for cuentas"""


class categoriasArgsFromcuentas(TypedDict, total=False):
    """Arguments for cuentas"""
    include: 'categoriasIncludeFromcategorias'


class FindManycategoriasArgsFromcuentas(TypedDict, total=False):
    """Arguments for cuentas"""
    take: int
    skip: int
    order_by: Union['categoriasOrderByInput', List['categoriasOrderByInput']]
    where: 'categoriasWhereInput'
    cursor: 'categoriasWhereUniqueInput'
    distinct: List['categoriasScalarFieldKeys']
    include: 'categoriasIncludeFromcategorias'


class cuentasIncludeFromcuentas(TypedDict, total=False):
    """Relational arguments for cuentas"""


class cuentasArgsFromcuentas(TypedDict, total=False):
    """Arguments for cuentas"""
    include: 'cuentasIncludeFromcuentas'


class FindManycuentasArgsFromcuentas(TypedDict, total=False):
    """Arguments for cuentas"""
    take: int
    skip: int
    order_by: Union['cuentasOrderByInput', List['cuentasOrderByInput']]
    where: 'cuentasWhereInput'
    cursor: 'cuentasWhereUniqueInput'
    distinct: List['cuentasScalarFieldKeys']
    include: 'cuentasIncludeFromcuentas'


class transaccionesIncludeFromcuentas(TypedDict, total=False):
    """Relational arguments for cuentas"""


class transaccionesArgsFromcuentas(TypedDict, total=False):
    """Arguments for cuentas"""
    include: 'transaccionesIncludeFromtransacciones'


class FindManytransaccionesArgsFromcuentas(TypedDict, total=False):
    """Arguments for cuentas"""
    take: int
    skip: int
    order_by: Union['transaccionesOrderByInput', List['transaccionesOrderByInput']]
    where: 'transaccionesWhereInput'
    cursor: 'transaccionesWhereUniqueInput'
    distinct: List['transaccionesScalarFieldKeys']
    include: 'transaccionesIncludeFromtransacciones'


class usuariosIncludeFromcuentas(TypedDict, total=False):
    """Relational arguments for cuentas"""


class usuariosArgsFromcuentas(TypedDict, total=False):
    """Arguments for cuentas"""
    include: 'usuariosIncludeFromusuarios'


class FindManyusuariosArgsFromcuentas(TypedDict, total=False):
    """Arguments for cuentas"""
    take: int
    skip: int
    order_by: Union['usuariosOrderByInput', List['usuariosOrderByInput']]
    where: 'usuariosWhereInput'
    cursor: 'usuariosWhereUniqueInput'
    distinct: List['usuariosScalarFieldKeys']
    include: 'usuariosIncludeFromusuarios'




FindManycuentasArgs = FindManycuentasArgsFromcuentas
FindFirstcuentasArgs = FindManycuentasArgsFromcuentas


class cuentasWhereInput(TypedDict, total=False):
    """cuentas arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    usuario_id: Union[None, _int, 'types.IntFilter']
    nombre: Union[_str, 'types.StringFilter']
    tipo: Union[None, _str, 'types.StringFilter']
    es_personalizada: Union[None, _bool, 'types.BooleanFilter']
    cuenta_base_id: Union[None, _int, 'types.IntFilter']
    saldo_inicial: Union[None, decimal.Decimal, 'types.DecimalFilter']
    fecha_creacion: Union[None, datetime.datetime, 'types.DateTimeFilter']
    descripcion: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['cuentasWhereInput', List['cuentasWhereInput']]
    # but this causes mypy to hang :/
    AND: List['cuentasWhereInput']
    OR: List['cuentasWhereInput']
    NOT: List['cuentasWhereInput']



# aggregate cuentas types


class cuentasScalarWhereWithAggregatesInput(TypedDict, total=False):
    """cuentas arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    usuario_id: Union[_int, 'types.IntWithAggregatesFilter']
    nombre: Union[_str, 'types.StringWithAggregatesFilter']
    tipo: Union[_str, 'types.StringWithAggregatesFilter']
    es_personalizada: Union[_bool, 'types.BooleanWithAggregatesFilter']
    cuenta_base_id: Union[_int, 'types.IntWithAggregatesFilter']
    saldo_inicial: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    fecha_creacion: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    descripcion: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['cuentasScalarWhereWithAggregatesInput']
    OR: List['cuentasScalarWhereWithAggregatesInput']
    NOT: List['cuentasScalarWhereWithAggregatesInput']



class cuentasGroupByOutput(TypedDict, total=False):
    id: _int
    usuario_id: _int
    nombre: _str
    tipo: _str
    es_personalizada: _bool
    cuenta_base_id: _int
    saldo_inicial: decimal.Decimal
    fecha_creacion: datetime.datetime
    descripcion: _str
    _sum: 'cuentasSumAggregateOutput'
    _avg: 'cuentasAvgAggregateOutput'
    _min: 'cuentasMinAggregateOutput'
    _max: 'cuentasMaxAggregateOutput'
    _count: 'cuentasCountAggregateOutput'


class cuentasAvgAggregateOutput(TypedDict, total=False):
    """cuentas output for aggregating averages"""
    id: float
    usuario_id: float
    cuenta_base_id: float


class cuentasSumAggregateOutput(TypedDict, total=False):
    """cuentas output for aggregating sums"""
    id: _int
    usuario_id: _int
    cuenta_base_id: _int


class cuentasScalarAggregateOutput(TypedDict, total=False):
    """cuentas output including scalar fields"""
    id: _int
    usuario_id: _int
    nombre: _str
    tipo: _str
    es_personalizada: _bool
    cuenta_base_id: _int
    saldo_inicial: decimal.Decimal
    fecha_creacion: datetime.datetime
    descripcion: _str


cuentasMinAggregateOutput = cuentasScalarAggregateOutput
cuentasMaxAggregateOutput = cuentasScalarAggregateOutput


class cuentasMaxAggregateInput(TypedDict, total=False):
    """cuentas input for aggregating by max"""
    id: bool
    usuario_id: bool
    nombre: bool
    tipo: bool
    es_personalizada: bool
    cuenta_base_id: bool
    saldo_inicial: bool
    fecha_creacion: bool
    descripcion: bool


class cuentasMinAggregateInput(TypedDict, total=False):
    """cuentas input for aggregating by min"""
    id: bool
    usuario_id: bool
    nombre: bool
    tipo: bool
    es_personalizada: bool
    cuenta_base_id: bool
    saldo_inicial: bool
    fecha_creacion: bool
    descripcion: bool


class cuentasNumberAggregateInput(TypedDict, total=False):
    """cuentas input for aggregating numbers"""
    id: bool
    usuario_id: bool
    cuenta_base_id: bool


cuentasAvgAggregateInput = cuentasNumberAggregateInput
cuentasSumAggregateInput = cuentasNumberAggregateInput


cuentasCountAggregateInput = TypedDict(
    'cuentasCountAggregateInput',
    {
        'id': bool,
        'usuario_id': bool,
        'nombre': bool,
        'tipo': bool,
        'es_personalizada': bool,
        'cuenta_base_id': bool,
        'saldo_inicial': bool,
        'fecha_creacion': bool,
        'descripcion': bool,
        '_all': bool,
    },
    total=False,
)

cuentasCountAggregateOutput = TypedDict(
    'cuentasCountAggregateOutput',
    {
        'id': int,
        'usuario_id': int,
        'nombre': int,
        'tipo': int,
        'es_personalizada': int,
        'cuenta_base_id': int,
        'saldo_inicial': int,
        'fecha_creacion': int,
        'descripcion': int,
        '_all': int,
    },
    total=False,
)


cuentasKeys = Literal[
    'id',
    'usuario_id',
    'nombre',
    'tipo',
    'es_personalizada',
    'cuenta_base_id',
    'saldo_inicial',
    'fecha_creacion',
    'descripcion',
]
cuentasScalarFieldKeys = Literal[
    'id',
    'usuario_id',
    'nombre',
    'tipo',
    'es_personalizada',
    'cuenta_base_id',
    'saldo_inicial',
    'fecha_creacion',
    'descripcion',
]
cuentasScalarFieldKeysT = TypeVar('cuentasScalarFieldKeysT', bound=cuentasScalarFieldKeys)

cuentasRelationalFieldKeys = _NoneType

# transacciones types

class transaccionesOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the transacciones create method"""
    id: _int
    categoria_id: Optional[_int]
    descripcion: Optional[_str]
    fecha: Optional[datetime.datetime]


class transaccionesCreateInput(transaccionesOptionalCreateInput):
    """Required arguments to the transacciones create method"""
    usuario_id: _int
    cuenta_id: _int
    tipo: _str
    monto: decimal.Decimal


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class transaccionesOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the transacciones create method, without relations"""
    id: _int
    categoria_id: Optional[_int]
    descripcion: Optional[_str]
    fecha: Optional[datetime.datetime]


class transaccionesCreateWithoutRelationsInput(transaccionesOptionalCreateWithoutRelationsInput):
    """Required arguments to the transacciones create method, without relations"""
    usuario_id: _int
    cuenta_id: _int
    tipo: _str
    monto: decimal.Decimal

class transaccionesConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'transaccionesCreateWithoutRelationsInput'
    where: 'transaccionesWhereUniqueInput'

class transaccionesCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'transaccionesCreateWithoutRelationsInput'
    connect: 'transaccionesWhereUniqueInput'
    connect_or_create: 'transaccionesConnectOrCreateWithoutRelationsInput'


class transaccionesCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['transaccionesCreateWithoutRelationsInput', List['transaccionesCreateWithoutRelationsInput']]
    connect: Union['transaccionesWhereUniqueInput', List['transaccionesWhereUniqueInput']]
    connect_or_create: Union['transaccionesConnectOrCreateWithoutRelationsInput', List['transaccionesConnectOrCreateWithoutRelationsInput']]

_transaccionesWhereUnique_id_Input = TypedDict(
    '_transaccionesWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

transaccionesWhereUniqueInput = _transaccionesWhereUnique_id_Input


class transaccionesUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    usuario_id: Union[AtomicIntInput, _int]
    cuenta_id: Union[AtomicIntInput, _int]
    categoria_id: Optional[Union[AtomicIntInput, _int]]
    tipo: _str
    monto: decimal.Decimal
    descripcion: Optional[_str]
    fecha: Optional[datetime.datetime]


class transaccionesUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    usuario_id: Union[AtomicIntInput, _int]
    cuenta_id: Union[AtomicIntInput, _int]
    categoria_id: Optional[Union[AtomicIntInput, _int]]
    tipo: _str
    monto: decimal.Decimal
    descripcion: Optional[_str]
    fecha: Optional[datetime.datetime]


class transaccionesUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['transaccionesCreateWithoutRelationsInput']
    connect: List['transaccionesWhereUniqueInput']
    connect_or_create: List['transaccionesConnectOrCreateWithoutRelationsInput']
    set: List['transaccionesWhereUniqueInput']
    disconnect: List['transaccionesWhereUniqueInput']
    delete: List['transaccionesWhereUniqueInput']

    # TODO
    # update: List['transaccionesUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['transaccionesUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['transaccionesScalarWhereInput']
    # upsert: List['transaccionesUpserteWithWhereUniqueWithoutRelationsInput']


class transaccionesUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'transaccionesCreateWithoutRelationsInput'
    connect: 'transaccionesWhereUniqueInput'
    connect_or_create: 'transaccionesConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'transaccionesUpdateInput'
    # upsert: 'transaccionesUpsertWithoutRelationsInput'


class transaccionesUpsertInput(TypedDict):
    create: 'transaccionesCreateInput'
    update: 'transaccionesUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_transacciones_id_OrderByInput = TypedDict(
    '_transacciones_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_transacciones_usuario_id_OrderByInput = TypedDict(
    '_transacciones_usuario_id_OrderByInput',
    {
        'usuario_id': 'SortOrder',
    },
    total=True
)

_transacciones_cuenta_id_OrderByInput = TypedDict(
    '_transacciones_cuenta_id_OrderByInput',
    {
        'cuenta_id': 'SortOrder',
    },
    total=True
)

_transacciones_categoria_id_OrderByInput = TypedDict(
    '_transacciones_categoria_id_OrderByInput',
    {
        'categoria_id': 'SortOrder',
    },
    total=True
)

_transacciones_tipo_OrderByInput = TypedDict(
    '_transacciones_tipo_OrderByInput',
    {
        'tipo': 'SortOrder',
    },
    total=True
)

_transacciones_monto_OrderByInput = TypedDict(
    '_transacciones_monto_OrderByInput',
    {
        'monto': 'SortOrder',
    },
    total=True
)

_transacciones_descripcion_OrderByInput = TypedDict(
    '_transacciones_descripcion_OrderByInput',
    {
        'descripcion': 'SortOrder',
    },
    total=True
)

_transacciones_fecha_OrderByInput = TypedDict(
    '_transacciones_fecha_OrderByInput',
    {
        'fecha': 'SortOrder',
    },
    total=True
)

_transacciones_RelevanceInner = TypedDict(
    '_transacciones_RelevanceInner',
    {
        'fields': 'List[transaccionesScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_transacciones_RelevanceOrderByInput = TypedDict(
    '_transacciones_RelevanceOrderByInput',
    {
        '_relevance': '_transacciones_RelevanceInner',
    },
    total=True
)

transaccionesOrderByInput = Union[
    '_transacciones_id_OrderByInput',
    '_transacciones_usuario_id_OrderByInput',
    '_transacciones_cuenta_id_OrderByInput',
    '_transacciones_categoria_id_OrderByInput',
    '_transacciones_tipo_OrderByInput',
    '_transacciones_monto_OrderByInput',
    '_transacciones_descripcion_OrderByInput',
    '_transacciones_fecha_OrderByInput',
    '_transacciones_RelevanceOrderByInput',
]



# recursive transacciones types
# TODO: cleanup these types



transaccionesRelationFilter = TypedDict(
    'transaccionesRelationFilter',
    {
        'is': 'transaccionesWhereInput',
        'is_not': 'transaccionesWhereInput',
    },
    total=False,
)


class transaccionesListRelationFilter(TypedDict, total=False):
    some: 'transaccionesWhereInput'
    none: 'transaccionesWhereInput'
    every: 'transaccionesWhereInput'


class transaccionesInclude(TypedDict, total=False):
    """transacciones relational arguments"""


class categoriasIncludeFromtransacciones(TypedDict, total=False):
    """Relational arguments for transacciones"""


class categoriasArgsFromtransacciones(TypedDict, total=False):
    """Arguments for transacciones"""
    include: 'categoriasIncludeFromcategorias'


class FindManycategoriasArgsFromtransacciones(TypedDict, total=False):
    """Arguments for transacciones"""
    take: int
    skip: int
    order_by: Union['categoriasOrderByInput', List['categoriasOrderByInput']]
    where: 'categoriasWhereInput'
    cursor: 'categoriasWhereUniqueInput'
    distinct: List['categoriasScalarFieldKeys']
    include: 'categoriasIncludeFromcategorias'


class cuentasIncludeFromtransacciones(TypedDict, total=False):
    """Relational arguments for transacciones"""


class cuentasArgsFromtransacciones(TypedDict, total=False):
    """Arguments for transacciones"""
    include: 'cuentasIncludeFromcuentas'


class FindManycuentasArgsFromtransacciones(TypedDict, total=False):
    """Arguments for transacciones"""
    take: int
    skip: int
    order_by: Union['cuentasOrderByInput', List['cuentasOrderByInput']]
    where: 'cuentasWhereInput'
    cursor: 'cuentasWhereUniqueInput'
    distinct: List['cuentasScalarFieldKeys']
    include: 'cuentasIncludeFromcuentas'


class transaccionesIncludeFromtransacciones(TypedDict, total=False):
    """Relational arguments for transacciones"""


class transaccionesArgsFromtransacciones(TypedDict, total=False):
    """Arguments for transacciones"""
    include: 'transaccionesIncludeFromtransacciones'


class FindManytransaccionesArgsFromtransacciones(TypedDict, total=False):
    """Arguments for transacciones"""
    take: int
    skip: int
    order_by: Union['transaccionesOrderByInput', List['transaccionesOrderByInput']]
    where: 'transaccionesWhereInput'
    cursor: 'transaccionesWhereUniqueInput'
    distinct: List['transaccionesScalarFieldKeys']
    include: 'transaccionesIncludeFromtransacciones'


class usuariosIncludeFromtransacciones(TypedDict, total=False):
    """Relational arguments for transacciones"""


class usuariosArgsFromtransacciones(TypedDict, total=False):
    """Arguments for transacciones"""
    include: 'usuariosIncludeFromusuarios'


class FindManyusuariosArgsFromtransacciones(TypedDict, total=False):
    """Arguments for transacciones"""
    take: int
    skip: int
    order_by: Union['usuariosOrderByInput', List['usuariosOrderByInput']]
    where: 'usuariosWhereInput'
    cursor: 'usuariosWhereUniqueInput'
    distinct: List['usuariosScalarFieldKeys']
    include: 'usuariosIncludeFromusuarios'




FindManytransaccionesArgs = FindManytransaccionesArgsFromtransacciones
FindFirsttransaccionesArgs = FindManytransaccionesArgsFromtransacciones


class transaccionesWhereInput(TypedDict, total=False):
    """transacciones arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    usuario_id: Union[_int, 'types.IntFilter']
    cuenta_id: Union[_int, 'types.IntFilter']
    categoria_id: Union[None, _int, 'types.IntFilter']
    tipo: Union[_str, 'types.StringFilter']
    monto: Union[decimal.Decimal, 'types.DecimalFilter']
    descripcion: Union[None, _str, 'types.StringFilter']
    fecha: Union[None, datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['transaccionesWhereInput', List['transaccionesWhereInput']]
    # but this causes mypy to hang :/
    AND: List['transaccionesWhereInput']
    OR: List['transaccionesWhereInput']
    NOT: List['transaccionesWhereInput']



# aggregate transacciones types


class transaccionesScalarWhereWithAggregatesInput(TypedDict, total=False):
    """transacciones arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    usuario_id: Union[_int, 'types.IntWithAggregatesFilter']
    cuenta_id: Union[_int, 'types.IntWithAggregatesFilter']
    categoria_id: Union[_int, 'types.IntWithAggregatesFilter']
    tipo: Union[_str, 'types.StringWithAggregatesFilter']
    monto: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    descripcion: Union[_str, 'types.StringWithAggregatesFilter']
    fecha: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['transaccionesScalarWhereWithAggregatesInput']
    OR: List['transaccionesScalarWhereWithAggregatesInput']
    NOT: List['transaccionesScalarWhereWithAggregatesInput']



class transaccionesGroupByOutput(TypedDict, total=False):
    id: _int
    usuario_id: _int
    cuenta_id: _int
    categoria_id: _int
    tipo: _str
    monto: decimal.Decimal
    descripcion: _str
    fecha: datetime.datetime
    _sum: 'transaccionesSumAggregateOutput'
    _avg: 'transaccionesAvgAggregateOutput'
    _min: 'transaccionesMinAggregateOutput'
    _max: 'transaccionesMaxAggregateOutput'
    _count: 'transaccionesCountAggregateOutput'


class transaccionesAvgAggregateOutput(TypedDict, total=False):
    """transacciones output for aggregating averages"""
    id: float
    usuario_id: float
    cuenta_id: float
    categoria_id: float


class transaccionesSumAggregateOutput(TypedDict, total=False):
    """transacciones output for aggregating sums"""
    id: _int
    usuario_id: _int
    cuenta_id: _int
    categoria_id: _int


class transaccionesScalarAggregateOutput(TypedDict, total=False):
    """transacciones output including scalar fields"""
    id: _int
    usuario_id: _int
    cuenta_id: _int
    categoria_id: _int
    tipo: _str
    monto: decimal.Decimal
    descripcion: _str
    fecha: datetime.datetime


transaccionesMinAggregateOutput = transaccionesScalarAggregateOutput
transaccionesMaxAggregateOutput = transaccionesScalarAggregateOutput


class transaccionesMaxAggregateInput(TypedDict, total=False):
    """transacciones input for aggregating by max"""
    id: bool
    usuario_id: bool
    cuenta_id: bool
    categoria_id: bool
    tipo: bool
    monto: bool
    descripcion: bool
    fecha: bool


class transaccionesMinAggregateInput(TypedDict, total=False):
    """transacciones input for aggregating by min"""
    id: bool
    usuario_id: bool
    cuenta_id: bool
    categoria_id: bool
    tipo: bool
    monto: bool
    descripcion: bool
    fecha: bool


class transaccionesNumberAggregateInput(TypedDict, total=False):
    """transacciones input for aggregating numbers"""
    id: bool
    usuario_id: bool
    cuenta_id: bool
    categoria_id: bool


transaccionesAvgAggregateInput = transaccionesNumberAggregateInput
transaccionesSumAggregateInput = transaccionesNumberAggregateInput


transaccionesCountAggregateInput = TypedDict(
    'transaccionesCountAggregateInput',
    {
        'id': bool,
        'usuario_id': bool,
        'cuenta_id': bool,
        'categoria_id': bool,
        'tipo': bool,
        'monto': bool,
        'descripcion': bool,
        'fecha': bool,
        '_all': bool,
    },
    total=False,
)

transaccionesCountAggregateOutput = TypedDict(
    'transaccionesCountAggregateOutput',
    {
        'id': int,
        'usuario_id': int,
        'cuenta_id': int,
        'categoria_id': int,
        'tipo': int,
        'monto': int,
        'descripcion': int,
        'fecha': int,
        '_all': int,
    },
    total=False,
)


transaccionesKeys = Literal[
    'id',
    'usuario_id',
    'cuenta_id',
    'categoria_id',
    'tipo',
    'monto',
    'descripcion',
    'fecha',
]
transaccionesScalarFieldKeys = Literal[
    'id',
    'usuario_id',
    'cuenta_id',
    'categoria_id',
    'tipo',
    'monto',
    'descripcion',
    'fecha',
]
transaccionesScalarFieldKeysT = TypeVar('transaccionesScalarFieldKeysT', bound=transaccionesScalarFieldKeys)

transaccionesRelationalFieldKeys = _NoneType

# usuarios types

class usuariosOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the usuarios create method"""
    id: _int
    fecha_creacion: Optional[datetime.datetime]


class usuariosCreateInput(usuariosOptionalCreateInput):
    """Required arguments to the usuarios create method"""
    nombre: _str
    email: _str
    password: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class usuariosOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the usuarios create method, without relations"""
    id: _int
    fecha_creacion: Optional[datetime.datetime]


class usuariosCreateWithoutRelationsInput(usuariosOptionalCreateWithoutRelationsInput):
    """Required arguments to the usuarios create method, without relations"""
    nombre: _str
    email: _str
    password: _str

class usuariosConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'usuariosCreateWithoutRelationsInput'
    where: 'usuariosWhereUniqueInput'

class usuariosCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'usuariosCreateWithoutRelationsInput'
    connect: 'usuariosWhereUniqueInput'
    connect_or_create: 'usuariosConnectOrCreateWithoutRelationsInput'


class usuariosCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['usuariosCreateWithoutRelationsInput', List['usuariosCreateWithoutRelationsInput']]
    connect: Union['usuariosWhereUniqueInput', List['usuariosWhereUniqueInput']]
    connect_or_create: Union['usuariosConnectOrCreateWithoutRelationsInput', List['usuariosConnectOrCreateWithoutRelationsInput']]

_usuariosWhereUnique_id_Input = TypedDict(
    '_usuariosWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_usuariosWhereUnique_email_Input = TypedDict(
    '_usuariosWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

usuariosWhereUniqueInput = Union[
    '_usuariosWhereUnique_id_Input',
    '_usuariosWhereUnique_email_Input',
]


class usuariosUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    nombre: _str
    email: _str
    password: _str
    fecha_creacion: Optional[datetime.datetime]


class usuariosUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    nombre: _str
    email: _str
    password: _str
    fecha_creacion: Optional[datetime.datetime]


class usuariosUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['usuariosCreateWithoutRelationsInput']
    connect: List['usuariosWhereUniqueInput']
    connect_or_create: List['usuariosConnectOrCreateWithoutRelationsInput']
    set: List['usuariosWhereUniqueInput']
    disconnect: List['usuariosWhereUniqueInput']
    delete: List['usuariosWhereUniqueInput']

    # TODO
    # update: List['usuariosUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['usuariosUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['usuariosScalarWhereInput']
    # upsert: List['usuariosUpserteWithWhereUniqueWithoutRelationsInput']


class usuariosUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'usuariosCreateWithoutRelationsInput'
    connect: 'usuariosWhereUniqueInput'
    connect_or_create: 'usuariosConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'usuariosUpdateInput'
    # upsert: 'usuariosUpsertWithoutRelationsInput'


class usuariosUpsertInput(TypedDict):
    create: 'usuariosCreateInput'
    update: 'usuariosUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_usuarios_id_OrderByInput = TypedDict(
    '_usuarios_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_usuarios_nombre_OrderByInput = TypedDict(
    '_usuarios_nombre_OrderByInput',
    {
        'nombre': 'SortOrder',
    },
    total=True
)

_usuarios_email_OrderByInput = TypedDict(
    '_usuarios_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_usuarios_password_OrderByInput = TypedDict(
    '_usuarios_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_usuarios_fecha_creacion_OrderByInput = TypedDict(
    '_usuarios_fecha_creacion_OrderByInput',
    {
        'fecha_creacion': 'SortOrder',
    },
    total=True
)

_usuarios_RelevanceInner = TypedDict(
    '_usuarios_RelevanceInner',
    {
        'fields': 'List[usuariosScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_usuarios_RelevanceOrderByInput = TypedDict(
    '_usuarios_RelevanceOrderByInput',
    {
        '_relevance': '_usuarios_RelevanceInner',
    },
    total=True
)

usuariosOrderByInput = Union[
    '_usuarios_id_OrderByInput',
    '_usuarios_nombre_OrderByInput',
    '_usuarios_email_OrderByInput',
    '_usuarios_password_OrderByInput',
    '_usuarios_fecha_creacion_OrderByInput',
    '_usuarios_RelevanceOrderByInput',
]



# recursive usuarios types
# TODO: cleanup these types



usuariosRelationFilter = TypedDict(
    'usuariosRelationFilter',
    {
        'is': 'usuariosWhereInput',
        'is_not': 'usuariosWhereInput',
    },
    total=False,
)


class usuariosListRelationFilter(TypedDict, total=False):
    some: 'usuariosWhereInput'
    none: 'usuariosWhereInput'
    every: 'usuariosWhereInput'


class usuariosInclude(TypedDict, total=False):
    """usuarios relational arguments"""


class categoriasIncludeFromusuarios(TypedDict, total=False):
    """Relational arguments for usuarios"""


class categoriasArgsFromusuarios(TypedDict, total=False):
    """Arguments for usuarios"""
    include: 'categoriasIncludeFromcategorias'


class FindManycategoriasArgsFromusuarios(TypedDict, total=False):
    """Arguments for usuarios"""
    take: int
    skip: int
    order_by: Union['categoriasOrderByInput', List['categoriasOrderByInput']]
    where: 'categoriasWhereInput'
    cursor: 'categoriasWhereUniqueInput'
    distinct: List['categoriasScalarFieldKeys']
    include: 'categoriasIncludeFromcategorias'


class cuentasIncludeFromusuarios(TypedDict, total=False):
    """Relational arguments for usuarios"""


class cuentasArgsFromusuarios(TypedDict, total=False):
    """Arguments for usuarios"""
    include: 'cuentasIncludeFromcuentas'


class FindManycuentasArgsFromusuarios(TypedDict, total=False):
    """Arguments for usuarios"""
    take: int
    skip: int
    order_by: Union['cuentasOrderByInput', List['cuentasOrderByInput']]
    where: 'cuentasWhereInput'
    cursor: 'cuentasWhereUniqueInput'
    distinct: List['cuentasScalarFieldKeys']
    include: 'cuentasIncludeFromcuentas'


class transaccionesIncludeFromusuarios(TypedDict, total=False):
    """Relational arguments for usuarios"""


class transaccionesArgsFromusuarios(TypedDict, total=False):
    """Arguments for usuarios"""
    include: 'transaccionesIncludeFromtransacciones'


class FindManytransaccionesArgsFromusuarios(TypedDict, total=False):
    """Arguments for usuarios"""
    take: int
    skip: int
    order_by: Union['transaccionesOrderByInput', List['transaccionesOrderByInput']]
    where: 'transaccionesWhereInput'
    cursor: 'transaccionesWhereUniqueInput'
    distinct: List['transaccionesScalarFieldKeys']
    include: 'transaccionesIncludeFromtransacciones'


class usuariosIncludeFromusuarios(TypedDict, total=False):
    """Relational arguments for usuarios"""


class usuariosArgsFromusuarios(TypedDict, total=False):
    """Arguments for usuarios"""
    include: 'usuariosIncludeFromusuarios'


class FindManyusuariosArgsFromusuarios(TypedDict, total=False):
    """Arguments for usuarios"""
    take: int
    skip: int
    order_by: Union['usuariosOrderByInput', List['usuariosOrderByInput']]
    where: 'usuariosWhereInput'
    cursor: 'usuariosWhereUniqueInput'
    distinct: List['usuariosScalarFieldKeys']
    include: 'usuariosIncludeFromusuarios'




FindManyusuariosArgs = FindManyusuariosArgsFromusuarios
FindFirstusuariosArgs = FindManyusuariosArgsFromusuarios


class usuariosWhereInput(TypedDict, total=False):
    """usuarios arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nombre: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    fecha_creacion: Union[None, datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['usuariosWhereInput', List['usuariosWhereInput']]
    # but this causes mypy to hang :/
    AND: List['usuariosWhereInput']
    OR: List['usuariosWhereInput']
    NOT: List['usuariosWhereInput']



# aggregate usuarios types


class usuariosScalarWhereWithAggregatesInput(TypedDict, total=False):
    """usuarios arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nombre: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    fecha_creacion: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['usuariosScalarWhereWithAggregatesInput']
    OR: List['usuariosScalarWhereWithAggregatesInput']
    NOT: List['usuariosScalarWhereWithAggregatesInput']



class usuariosGroupByOutput(TypedDict, total=False):
    id: _int
    nombre: _str
    email: _str
    password: _str
    fecha_creacion: datetime.datetime
    _sum: 'usuariosSumAggregateOutput'
    _avg: 'usuariosAvgAggregateOutput'
    _min: 'usuariosMinAggregateOutput'
    _max: 'usuariosMaxAggregateOutput'
    _count: 'usuariosCountAggregateOutput'


class usuariosAvgAggregateOutput(TypedDict, total=False):
    """usuarios output for aggregating averages"""
    id: float


class usuariosSumAggregateOutput(TypedDict, total=False):
    """usuarios output for aggregating sums"""
    id: _int


class usuariosScalarAggregateOutput(TypedDict, total=False):
    """usuarios output including scalar fields"""
    id: _int
    nombre: _str
    email: _str
    password: _str
    fecha_creacion: datetime.datetime


usuariosMinAggregateOutput = usuariosScalarAggregateOutput
usuariosMaxAggregateOutput = usuariosScalarAggregateOutput


class usuariosMaxAggregateInput(TypedDict, total=False):
    """usuarios input for aggregating by max"""
    id: bool
    nombre: bool
    email: bool
    password: bool
    fecha_creacion: bool


class usuariosMinAggregateInput(TypedDict, total=False):
    """usuarios input for aggregating by min"""
    id: bool
    nombre: bool
    email: bool
    password: bool
    fecha_creacion: bool


class usuariosNumberAggregateInput(TypedDict, total=False):
    """usuarios input for aggregating numbers"""
    id: bool


usuariosAvgAggregateInput = usuariosNumberAggregateInput
usuariosSumAggregateInput = usuariosNumberAggregateInput


usuariosCountAggregateInput = TypedDict(
    'usuariosCountAggregateInput',
    {
        'id': bool,
        'nombre': bool,
        'email': bool,
        'password': bool,
        'fecha_creacion': bool,
        '_all': bool,
    },
    total=False,
)

usuariosCountAggregateOutput = TypedDict(
    'usuariosCountAggregateOutput',
    {
        'id': int,
        'nombre': int,
        'email': int,
        'password': int,
        'fecha_creacion': int,
        '_all': int,
    },
    total=False,
)


usuariosKeys = Literal[
    'id',
    'nombre',
    'email',
    'password',
    'fecha_creacion',
]
usuariosScalarFieldKeys = Literal[
    'id',
    'nombre',
    'email',
    'password',
    'fecha_creacion',
]
usuariosScalarFieldKeysT = TypeVar('usuariosScalarFieldKeysT', bound=usuariosScalarFieldKeys)

usuariosRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields