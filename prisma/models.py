# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


from typing_extensions import LiteralString
# -- template models.py.jinja --
import os
import logging
import inspect
import warnings
from collections import OrderedDict

from pydantic import BaseModel, Field

from . import types, enums, errors, fields, bases
from ._types import FuncType
from ._compat import model_rebuild, field_validator
from ._builder import serialize_base64
from .generator import partial_models_ctx, PartialModelField


log: logging.Logger = logging.getLogger(__name__)
_created_partial_types: Set[str] = set()

class categorias(bases.Basecategorias):
    """Represents a categorias record"""

    id: _int
    usuario_id: Optional[_int] = None
    nombre: _str



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.categoriasKeys']] = None,
        exclude: Optional[Iterable['types.categoriasKeys']] = None,
        required: Optional[Iterable['types.categoriasKeys']] = None,
        optional: Optional[Iterable['types.categoriasKeys']] = None,
        relations: Optional[Mapping['types.categoriasRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.categoriasKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _categorias_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _categorias_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _categorias_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _categorias_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True


            if relations:
                raise ValueError('Model: "categorias" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid categorias / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'categorias',
            }
        )
        _created_partial_types.add(name)


class cuentas(bases.Basecuentas):
    """Represents a cuentas record"""

    id: _int
    usuario_id: Optional[_int] = None
    nombre: _str
    tipo: Optional[_str] = None
    es_personalizada: Optional[_bool] = None
    cuenta_base_id: Optional[_int] = None
    saldo_inicial: Optional[decimal.Decimal] = None
    fecha_creacion: Optional[datetime.datetime] = None
    descripcion: Optional[_str] = None



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.cuentasKeys']] = None,
        exclude: Optional[Iterable['types.cuentasKeys']] = None,
        required: Optional[Iterable['types.cuentasKeys']] = None,
        optional: Optional[Iterable['types.cuentasKeys']] = None,
        relations: Optional[Mapping['types.cuentasRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.cuentasKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _cuentas_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _cuentas_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _cuentas_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _cuentas_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True


            if relations:
                raise ValueError('Model: "cuentas" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid cuentas / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'cuentas',
            }
        )
        _created_partial_types.add(name)


class transacciones(bases.Basetransacciones):
    """This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
    """

    id: _int
    usuario_id: _int
    cuenta_id: _int
    categoria_id: Optional[_int] = None
    tipo: _str
    monto: decimal.Decimal
    descripcion: Optional[_str] = None
    fecha: Optional[datetime.datetime] = None



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.transaccionesKeys']] = None,
        exclude: Optional[Iterable['types.transaccionesKeys']] = None,
        required: Optional[Iterable['types.transaccionesKeys']] = None,
        optional: Optional[Iterable['types.transaccionesKeys']] = None,
        relations: Optional[Mapping['types.transaccionesRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.transaccionesKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _transacciones_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _transacciones_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _transacciones_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _transacciones_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True


            if relations:
                raise ValueError('Model: "transacciones" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid transacciones / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'transacciones',
            }
        )
        _created_partial_types.add(name)


class usuarios(bases.Baseusuarios):
    """Represents a usuarios record"""

    id: _int
    nombre: _str
    email: _str
    password: _str
    fecha_creacion: Optional[datetime.datetime] = None



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.usuariosKeys']] = None,
        exclude: Optional[Iterable['types.usuariosKeys']] = None,
        required: Optional[Iterable['types.usuariosKeys']] = None,
        optional: Optional[Iterable['types.usuariosKeys']] = None,
        relations: Optional[Mapping['types.usuariosRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.usuariosKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _usuarios_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _usuarios_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _usuarios_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _usuarios_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True


            if relations:
                raise ValueError('Model: "usuarios" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid usuarios / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'usuarios',
            }
        )
        _created_partial_types.add(name)



_categorias_relational_fields: Set[str] = set()  # pyright: ignore[reportUnusedVariable]
_categorias_fields: Dict['types.categoriasKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('usuario_id', {
            'name': 'usuario_id',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('nombre', {
            'name': 'nombre',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_cuentas_relational_fields: Set[str] = set()  # pyright: ignore[reportUnusedVariable]
_cuentas_fields: Dict['types.cuentasKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('usuario_id', {
            'name': 'usuario_id',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('nombre', {
            'name': 'nombre',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('tipo', {
            'name': 'tipo',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('es_personalizada', {
            'name': 'es_personalizada',
            'is_list': False,
            'optional': True,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('cuenta_base_id', {
            'name': 'cuenta_base_id',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('saldo_inicial', {
            'name': 'saldo_inicial',
            'is_list': False,
            'optional': True,
            'type': 'decimal.Decimal',
            'is_relational': False,
            'documentation': None,
        }),
        ('fecha_creacion', {
            'name': 'fecha_creacion',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('descripcion', {
            'name': 'descripcion',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_transacciones_relational_fields: Set[str] = set()  # pyright: ignore[reportUnusedVariable]
_transacciones_fields: Dict['types.transaccionesKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('usuario_id', {
            'name': 'usuario_id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('cuenta_id', {
            'name': 'cuenta_id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('categoria_id', {
            'name': 'categoria_id',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('tipo', {
            'name': 'tipo',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('monto', {
            'name': 'monto',
            'is_list': False,
            'optional': False,
            'type': 'decimal.Decimal',
            'is_relational': False,
            'documentation': None,
        }),
        ('descripcion', {
            'name': 'descripcion',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('fecha', {
            'name': 'fecha',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_usuarios_relational_fields: Set[str] = set()  # pyright: ignore[reportUnusedVariable]
_usuarios_fields: Dict['types.usuariosKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('nombre', {
            'name': 'nombre',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('email', {
            'name': 'email',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('password', {
            'name': 'password',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('fecha_creacion', {
            'name': 'fecha_creacion',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)



# we have to import ourselves as relation types are namespaced to models
# e.g. models.Post
from . import models, actions

# required to support relationships between models
model_rebuild(categorias)
model_rebuild(cuentas)
model_rebuild(transacciones)
model_rebuild(usuarios)
