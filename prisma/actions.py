# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


from typing_extensions import LiteralString
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class categoriasActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.categorias]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await categorias.prisma().query_raw(
            'SELECT * FROM categorias WHERE id = ?',
            1103527590,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.categorias
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await categorias.prisma().query_first(
            'SELECT * FROM categorias WHERE usuario_id = ?',
            377401575,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.categoriasCreateInput,
        include: Optional[types.categoriasInclude] = None
    ) -> _PrismaModelT:
        """Create a new categorias record.

        Parameters
        ----------
        data
            categorias record data
        include
            Specifies which relations should be loaded on the returned categorias model

        Returns
        -------
        prisma.models.categorias
            The created categorias record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a categorias record from just the required fields
        categorias = await categorias.prisma().create(
            data={
                # data to create a categorias record
                'nombre': 'ggciceaie',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.categoriasCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple categorias records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of categorias record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await categorias.prisma().create_many(
            data=[
                {
                    # data to create a categorias record
                    'nombre': 'bbehjachib',
                },
                {
                    # data to create a categorias record
                    'nombre': 'cadfabfehe',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.categoriasWhereUniqueInput,
        include: Optional[types.categoriasInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single categorias record.

        Parameters
        ----------
        where
            categorias filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned categorias model

        Returns
        -------
        prisma.models.categorias
            The deleted categorias record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        categorias = await categorias.prisma().delete(
            where={
                'id': 368800899,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.categoriasWhereUniqueInput,
        include: Optional[types.categoriasInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique categorias record.

        Parameters
        ----------
        where
            categorias filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned categorias model

        Returns
        -------
        prisma.models.categorias
            The found categorias record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        categorias = await categorias.prisma().find_unique(
            where={
                'id': 1508029952,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.categoriasWhereUniqueInput,
        include: Optional[types.categoriasInclude] = None
    ) -> _PrismaModelT:
        """Find a unique categorias record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            categorias filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned categorias model

        Returns
        -------
        prisma.models.categorias
            The found categorias record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        categorias = await categorias.prisma().find_unique_or_raise(
            where={
                'id': 486256185,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.categoriasWhereInput] = None,
        cursor: Optional[types.categoriasWhereUniqueInput] = None,
        include: Optional[types.categoriasInclude] = None,
        order: Optional[Union[types.categoriasOrderByInput, List[types.categoriasOrderByInput]]] = None,
        distinct: Optional[List[types.categoriasScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple categorias records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of categorias records returned
        skip
            Ignore the first N results
        where
            categorias filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned categorias model
        order
            Order the returned categorias records by any field
        distinct
            Filter categorias records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.categorias]
            The list of all categorias records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 categorias records
        categorias = await categorias.prisma().find_many(take=10)

        # find the first 5 categorias records ordered by the nombre field
        categorias = await categorias.prisma().find_many(
            take=5,
            order={
                'nombre': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.categoriasWhereInput] = None,
        cursor: Optional[types.categoriasWhereUniqueInput] = None,
        include: Optional[types.categoriasInclude] = None,
        order: Optional[Union[types.categoriasOrderByInput, List[types.categoriasOrderByInput]]] = None,
        distinct: Optional[List[types.categoriasScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single categorias record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            categorias filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned categorias model
        order
            Order the returned categorias records by any field
        distinct
            Filter categorias records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.categorias
            The first categorias record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second categorias record ordered by the id field
        categorias = await categorias.prisma().find_first(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.categoriasWhereInput] = None,
        cursor: Optional[types.categoriasWhereUniqueInput] = None,
        include: Optional[types.categoriasInclude] = None,
        order: Optional[Union[types.categoriasOrderByInput, List[types.categoriasOrderByInput]]] = None,
        distinct: Optional[List[types.categoriasScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single categorias record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            categorias filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned categorias model
        order
            Order the returned categorias records by any field
        distinct
            Filter categorias records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.categorias
            The first categorias record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second categorias record ordered by the usuario_id field
        categorias = await categorias.prisma().find_first_or_raise(
            skip=1,
            order={
                'usuario_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.categoriasUpdateInput,
        where: types.categoriasWhereUniqueInput,
        include: Optional[types.categoriasInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single categorias record.

        Parameters
        ----------
        data
            categorias record data specifying what to update
        where
            categorias filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned categorias model

        Returns
        -------
        prisma.models.categorias
            The updated categorias record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        categorias = await categorias.prisma().update(
            where={
                'id': 1062517886,
            },
            data={
                # data to update the categorias record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.categoriasWhereUniqueInput,
        data: types.categoriasUpsertInput,
        include: Optional[types.categoriasInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            categorias filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned categorias model

        Returns
        -------
        prisma.models.categorias
            The created or updated categorias record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        categorias = await categorias.prisma().upsert(
            where={
                'id': 267834847,
            },
            data={
                'create': {
                    'id': 267834847,
                    'nombre': 'cadfabfehe',
                },
                'update': {
                    'nombre': 'cadfabfehe',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.categoriasUpdateManyMutationInput,
        where: types.categoriasWhereInput,
    ) -> int:
        """Update multiple categorias records

        Parameters
        ----------
        data
            categorias data to update the selected categorias records to
        where
            Filter to select the categorias records to update

        Returns
        -------
        int
            The total number of categorias records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all categorias records
        total = await categorias.prisma().update_many(
            data={
                'nombre': 'biabhbdai'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.categoriasWhereInput] = None,
        cursor: Optional[types.categoriasWhereUniqueInput] = None,
    ) -> int:
        """Count the number of categorias records present in the database

        Parameters
        ----------
        select
            Select the categorias fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            categorias filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.categoriasCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await categorias.prisma().count()

        # results: prisma.types.categoriasCountAggregateOutput
        results = await categorias.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.categoriasCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.categoriasWhereInput] = None,
        cursor: Optional[types.categoriasWhereUniqueInput] = None,
    ) -> types.categoriasCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.categoriasCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.categoriasWhereInput] = None,
        cursor: Optional[types.categoriasWhereUniqueInput] = None,
    ) -> Union[int, types.categoriasCountAggregateOutput]:
        """Count the number of categorias records present in the database

        Parameters
        ----------
        select
            Select the categorias fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            categorias filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.categoriasCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await categorias.prisma().count()

        # results: prisma.types.categoriasCountAggregateOutput
        results = await categorias.prisma().count(
            select={
                '_all': True,
                'usuario_id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.categoriasCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.categoriasWhereInput] = None
    ) -> int:
        """Delete multiple categorias records.

        Parameters
        ----------
        where
            Optional categorias filter to find the records to be deleted

        Returns
        -------
        int
            The total number of categorias records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all categorias records
        total = await categorias.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.categoriasScalarFieldKeysT'],
        *,
        where: Optional['types.categoriasWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.categoriasAvgAggregateInput'] = None,
        sum: Optional['types.categoriasSumAggregateInput'] = None,
        min: Optional['types.categoriasMinAggregateInput'] = None,
        max: Optional['types.categoriasMaxAggregateInput'] = None,
        having: Optional['types.categoriasScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.categoriasCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.categoriasScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.categoriasScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.categoriasGroupByOutput']:
        """Group categorias records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar categorias fields to group records by
        where
            categorias filter to select records
        take
            Limit the maximum number of categorias records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.categoriasGroupByOutput]
            A list of dictionaries representing the categorias record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group categorias records by nombre values
        # and count how many records are in each group
        results = await categorias.prisma().group_by(
            ['nombre'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class cuentasActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.cuentas]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await cuentas.prisma().query_raw(
            'SELECT * FROM cuentas WHERE id = ?',
            836760821,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.cuentas
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await cuentas.prisma().query_first(
            'SELECT * FROM cuentas WHERE usuario_id = ?',
            595337866,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.cuentasCreateInput,
        include: Optional[types.cuentasInclude] = None
    ) -> _PrismaModelT:
        """Create a new cuentas record.

        Parameters
        ----------
        data
            cuentas record data
        include
            Specifies which relations should be loaded on the returned cuentas model

        Returns
        -------
        prisma.models.cuentas
            The created cuentas record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a cuentas record from just the required fields
        cuentas = await cuentas.prisma().create(
            data={
                # data to create a cuentas record
                'nombre': 'hjaecfifb',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.cuentasCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple cuentas records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of cuentas record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await cuentas.prisma().create_many(
            data=[
                {
                    # data to create a cuentas record
                    'nombre': 'cbbbjbfcii',
                },
                {
                    # data to create a cuentas record
                    'nombre': 'bbejhfidcb',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.cuentasWhereUniqueInput,
        include: Optional[types.cuentasInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single cuentas record.

        Parameters
        ----------
        where
            cuentas filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned cuentas model

        Returns
        -------
        prisma.models.cuentas
            The deleted cuentas record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        cuentas = await cuentas.prisma().delete(
            where={
                'id': 1644289366,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.cuentasWhereUniqueInput,
        include: Optional[types.cuentasInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique cuentas record.

        Parameters
        ----------
        where
            cuentas filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned cuentas model

        Returns
        -------
        prisma.models.cuentas
            The found cuentas record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        cuentas = await cuentas.prisma().find_unique(
            where={
                'id': 1388290519,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.cuentasWhereUniqueInput,
        include: Optional[types.cuentasInclude] = None
    ) -> _PrismaModelT:
        """Find a unique cuentas record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            cuentas filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned cuentas model

        Returns
        -------
        prisma.models.cuentas
            The found cuentas record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        cuentas = await cuentas.prisma().find_unique_or_raise(
            where={
                'id': 1647418052,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.cuentasWhereInput] = None,
        cursor: Optional[types.cuentasWhereUniqueInput] = None,
        include: Optional[types.cuentasInclude] = None,
        order: Optional[Union[types.cuentasOrderByInput, List[types.cuentasOrderByInput]]] = None,
        distinct: Optional[List[types.cuentasScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple cuentas records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of cuentas records returned
        skip
            Ignore the first N results
        where
            cuentas filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned cuentas model
        order
            Order the returned cuentas records by any field
        distinct
            Filter cuentas records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.cuentas]
            The list of all cuentas records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 cuentas records
        cuentas = await cuentas.prisma().find_many(take=10)

        # find the first 5 cuentas records ordered by the nombre field
        cuentas = await cuentas.prisma().find_many(
            take=5,
            order={
                'nombre': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.cuentasWhereInput] = None,
        cursor: Optional[types.cuentasWhereUniqueInput] = None,
        include: Optional[types.cuentasInclude] = None,
        order: Optional[Union[types.cuentasOrderByInput, List[types.cuentasOrderByInput]]] = None,
        distinct: Optional[List[types.cuentasScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single cuentas record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            cuentas filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned cuentas model
        order
            Order the returned cuentas records by any field
        distinct
            Filter cuentas records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.cuentas
            The first cuentas record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second cuentas record ordered by the tipo field
        cuentas = await cuentas.prisma().find_first(
            skip=1,
            order={
                'tipo': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.cuentasWhereInput] = None,
        cursor: Optional[types.cuentasWhereUniqueInput] = None,
        include: Optional[types.cuentasInclude] = None,
        order: Optional[Union[types.cuentasOrderByInput, List[types.cuentasOrderByInput]]] = None,
        distinct: Optional[List[types.cuentasScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single cuentas record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            cuentas filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned cuentas model
        order
            Order the returned cuentas records by any field
        distinct
            Filter cuentas records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.cuentas
            The first cuentas record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second cuentas record ordered by the es_personalizada field
        cuentas = await cuentas.prisma().find_first_or_raise(
            skip=1,
            order={
                'es_personalizada': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.cuentasUpdateInput,
        where: types.cuentasWhereUniqueInput,
        include: Optional[types.cuentasInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single cuentas record.

        Parameters
        ----------
        data
            cuentas record data specifying what to update
        where
            cuentas filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned cuentas model

        Returns
        -------
        prisma.models.cuentas
            The updated cuentas record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        cuentas = await cuentas.prisma().update(
            where={
                'id': 1675546029,
            },
            data={
                # data to update the cuentas record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.cuentasWhereUniqueInput,
        data: types.cuentasUpsertInput,
        include: Optional[types.cuentasInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            cuentas filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned cuentas model

        Returns
        -------
        prisma.models.cuentas
            The created or updated cuentas record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        cuentas = await cuentas.prisma().upsert(
            where={
                'id': 1767274722,
            },
            data={
                'create': {
                    'id': 1767274722,
                    'nombre': 'bbejhfidcb',
                },
                'update': {
                    'nombre': 'bbejhfidcb',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.cuentasUpdateManyMutationInput,
        where: types.cuentasWhereInput,
    ) -> int:
        """Update multiple cuentas records

        Parameters
        ----------
        data
            cuentas data to update the selected cuentas records to
        where
            Filter to select the cuentas records to update

        Returns
        -------
        int
            The total number of cuentas records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all cuentas records
        total = await cuentas.prisma().update_many(
            data={
                'cuenta_base_id': 326272115
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.cuentasWhereInput] = None,
        cursor: Optional[types.cuentasWhereUniqueInput] = None,
    ) -> int:
        """Count the number of cuentas records present in the database

        Parameters
        ----------
        select
            Select the cuentas fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            cuentas filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.cuentasCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await cuentas.prisma().count()

        # results: prisma.types.cuentasCountAggregateOutput
        results = await cuentas.prisma().count(
            select={
                '_all': True,
                'saldo_inicial': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.cuentasCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.cuentasWhereInput] = None,
        cursor: Optional[types.cuentasWhereUniqueInput] = None,
    ) -> types.cuentasCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.cuentasCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.cuentasWhereInput] = None,
        cursor: Optional[types.cuentasWhereUniqueInput] = None,
    ) -> Union[int, types.cuentasCountAggregateOutput]:
        """Count the number of cuentas records present in the database

        Parameters
        ----------
        select
            Select the cuentas fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            cuentas filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.cuentasCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await cuentas.prisma().count()

        # results: prisma.types.cuentasCountAggregateOutput
        results = await cuentas.prisma().count(
            select={
                '_all': True,
                'fecha_creacion': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.cuentasCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.cuentasWhereInput] = None
    ) -> int:
        """Delete multiple cuentas records.

        Parameters
        ----------
        where
            Optional cuentas filter to find the records to be deleted

        Returns
        -------
        int
            The total number of cuentas records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all cuentas records
        total = await cuentas.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.cuentasScalarFieldKeysT'],
        *,
        where: Optional['types.cuentasWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.cuentasAvgAggregateInput'] = None,
        sum: Optional['types.cuentasSumAggregateInput'] = None,
        min: Optional['types.cuentasMinAggregateInput'] = None,
        max: Optional['types.cuentasMaxAggregateInput'] = None,
        having: Optional['types.cuentasScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.cuentasCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.cuentasScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.cuentasScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.cuentasGroupByOutput']:
        """Group cuentas records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar cuentas fields to group records by
        where
            cuentas filter to select records
        take
            Limit the maximum number of cuentas records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.cuentasGroupByOutput]
            A list of dictionaries representing the cuentas record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group cuentas records by descripcion values
        # and count how many records are in each group
        results = await cuentas.prisma().group_by(
            ['descripcion'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class transaccionesActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.transacciones]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await transacciones.prisma().query_raw(
            'SELECT * FROM transacciones WHERE id = ?',
            1343201072,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.transacciones
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await transacciones.prisma().query_first(
            'SELECT * FROM transacciones WHERE usuario_id = ?',
            675780521,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.transaccionesCreateInput,
        include: Optional[types.transaccionesInclude] = None
    ) -> _PrismaModelT:
        """Create a new transacciones record.

        Parameters
        ----------
        data
            transacciones record data
        include
            Specifies which relations should be loaded on the returned transacciones model

        Returns
        -------
        prisma.models.transacciones
            The created transacciones record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a transacciones record from just the required fields
        transacciones = await transacciones.prisma().create(
            data={
                # data to create a transacciones record
                'usuario_id': 744964398,
                'cuenta_id': 1969681615,
                'tipo': 'bbbgbhfjge',
                'monto': Decimal('861472101.130300'),
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.transaccionesCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple transacciones records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of transacciones record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await transacciones.prisma().create_many(
            data=[
                {
                    # data to create a transacciones record
                    'usuario_id': 1686638315,
                    'cuenta_id': 2000430152,
                    'tipo': 'bigibebcib',
                    'monto': Decimal('1860847622.144852'),
                },
                {
                    # data to create a transacciones record
                    'usuario_id': 1628650740,
                    'cuenta_id': 1249606685,
                    'tipo': 'idfjadbcc',
                    'monto': Decimal('763719779.42999'),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.transaccionesWhereUniqueInput,
        include: Optional[types.transaccionesInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single transacciones record.

        Parameters
        ----------
        where
            transacciones filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned transacciones model

        Returns
        -------
        prisma.models.transacciones
            The deleted transacciones record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        transacciones = await transacciones.prisma().delete(
            where={
                'id': 1775811865,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.transaccionesWhereUniqueInput,
        include: Optional[types.transaccionesInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique transacciones record.

        Parameters
        ----------
        where
            transacciones filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned transacciones model

        Returns
        -------
        prisma.models.transacciones
            The found transacciones record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        transacciones = await transacciones.prisma().find_unique(
            where={
                'id': 893145566,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.transaccionesWhereUniqueInput,
        include: Optional[types.transaccionesInclude] = None
    ) -> _PrismaModelT:
        """Find a unique transacciones record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            transacciones filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned transacciones model

        Returns
        -------
        prisma.models.transacciones
            The found transacciones record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        transacciones = await transacciones.prisma().find_unique_or_raise(
            where={
                'id': 995405759,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.transaccionesWhereInput] = None,
        cursor: Optional[types.transaccionesWhereUniqueInput] = None,
        include: Optional[types.transaccionesInclude] = None,
        order: Optional[Union[types.transaccionesOrderByInput, List[types.transaccionesOrderByInput]]] = None,
        distinct: Optional[List[types.transaccionesScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple transacciones records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of transacciones records returned
        skip
            Ignore the first N results
        where
            transacciones filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned transacciones model
        order
            Order the returned transacciones records by any field
        distinct
            Filter transacciones records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.transacciones]
            The list of all transacciones records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 transacciones records
        transacciones = await transacciones.prisma().find_many(take=10)

        # find the first 5 transacciones records ordered by the cuenta_id field
        transacciones = await transacciones.prisma().find_many(
            take=5,
            order={
                'cuenta_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.transaccionesWhereInput] = None,
        cursor: Optional[types.transaccionesWhereUniqueInput] = None,
        include: Optional[types.transaccionesInclude] = None,
        order: Optional[Union[types.transaccionesOrderByInput, List[types.transaccionesOrderByInput]]] = None,
        distinct: Optional[List[types.transaccionesScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single transacciones record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            transacciones filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned transacciones model
        order
            Order the returned transacciones records by any field
        distinct
            Filter transacciones records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.transacciones
            The first transacciones record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second transacciones record ordered by the categoria_id field
        transacciones = await transacciones.prisma().find_first(
            skip=1,
            order={
                'categoria_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.transaccionesWhereInput] = None,
        cursor: Optional[types.transaccionesWhereUniqueInput] = None,
        include: Optional[types.transaccionesInclude] = None,
        order: Optional[Union[types.transaccionesOrderByInput, List[types.transaccionesOrderByInput]]] = None,
        distinct: Optional[List[types.transaccionesScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single transacciones record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            transacciones filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned transacciones model
        order
            Order the returned transacciones records by any field
        distinct
            Filter transacciones records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.transacciones
            The first transacciones record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second transacciones record ordered by the tipo field
        transacciones = await transacciones.prisma().find_first_or_raise(
            skip=1,
            order={
                'tipo': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.transaccionesUpdateInput,
        where: types.transaccionesWhereUniqueInput,
        include: Optional[types.transaccionesInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single transacciones record.

        Parameters
        ----------
        data
            transacciones record data specifying what to update
        where
            transacciones filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned transacciones model

        Returns
        -------
        prisma.models.transacciones
            The updated transacciones record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        transacciones = await transacciones.prisma().update(
            where={
                'id': 2102736524,
            },
            data={
                # data to update the transacciones record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.transaccionesWhereUniqueInput,
        data: types.transaccionesUpsertInput,
        include: Optional[types.transaccionesInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            transacciones filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned transacciones model

        Returns
        -------
        prisma.models.transacciones
            The created or updated transacciones record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        transacciones = await transacciones.prisma().upsert(
            where={
                'id': 271520213,
            },
            data={
                'create': {
                    'id': 271520213,
                    'usuario_id': 1628650740,
                    'cuenta_id': 1249606685,
                    'tipo': 'idfjadbcc',
                    'monto': Decimal('763719779.42999'),
                },
                'update': {
                    'usuario_id': 1628650740,
                    'cuenta_id': 1249606685,
                    'tipo': 'idfjadbcc',
                    'monto': Decimal('763719779.42999'),
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.transaccionesUpdateManyMutationInput,
        where: types.transaccionesWhereInput,
    ) -> int:
        """Update multiple transacciones records

        Parameters
        ----------
        data
            transacciones data to update the selected transacciones records to
        where
            Filter to select the transacciones records to update

        Returns
        -------
        int
            The total number of transacciones records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all transacciones records
        total = await transacciones.prisma().update_many(
            data={
                'monto': Decimal('456633834.205825')
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.transaccionesWhereInput] = None,
        cursor: Optional[types.transaccionesWhereUniqueInput] = None,
    ) -> int:
        """Count the number of transacciones records present in the database

        Parameters
        ----------
        select
            Select the transacciones fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            transacciones filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.transaccionesCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await transacciones.prisma().count()

        # results: prisma.types.transaccionesCountAggregateOutput
        results = await transacciones.prisma().count(
            select={
                '_all': True,
                'descripcion': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.transaccionesCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.transaccionesWhereInput] = None,
        cursor: Optional[types.transaccionesWhereUniqueInput] = None,
    ) -> types.transaccionesCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.transaccionesCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.transaccionesWhereInput] = None,
        cursor: Optional[types.transaccionesWhereUniqueInput] = None,
    ) -> Union[int, types.transaccionesCountAggregateOutput]:
        """Count the number of transacciones records present in the database

        Parameters
        ----------
        select
            Select the transacciones fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            transacciones filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.transaccionesCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await transacciones.prisma().count()

        # results: prisma.types.transaccionesCountAggregateOutput
        results = await transacciones.prisma().count(
            select={
                '_all': True,
                'fecha': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.transaccionesCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.transaccionesWhereInput] = None
    ) -> int:
        """Delete multiple transacciones records.

        Parameters
        ----------
        where
            Optional transacciones filter to find the records to be deleted

        Returns
        -------
        int
            The total number of transacciones records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all transacciones records
        total = await transacciones.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.transaccionesScalarFieldKeysT'],
        *,
        where: Optional['types.transaccionesWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.transaccionesAvgAggregateInput'] = None,
        sum: Optional['types.transaccionesSumAggregateInput'] = None,
        min: Optional['types.transaccionesMinAggregateInput'] = None,
        max: Optional['types.transaccionesMaxAggregateInput'] = None,
        having: Optional['types.transaccionesScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.transaccionesCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.transaccionesScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.transaccionesScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.transaccionesGroupByOutput']:
        """Group transacciones records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar transacciones fields to group records by
        where
            transacciones filter to select records
        take
            Limit the maximum number of transacciones records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.transaccionesGroupByOutput]
            A list of dictionaries representing the transacciones record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group transacciones records by id values
        # and count how many records are in each group
        results = await transacciones.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class usuariosActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.usuarios]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await usuarios.prisma().query_raw(
            'SELECT * FROM usuarios WHERE id = ?',
            1583689592,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.usuarios
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await usuarios.prisma().query_first(
            'SELECT * FROM usuarios WHERE nombre = ?',
            'ihieecagf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.usuariosCreateInput,
        include: Optional[types.usuariosInclude] = None
    ) -> _PrismaModelT:
        """Create a new usuarios record.

        Parameters
        ----------
        data
            usuarios record data
        include
            Specifies which relations should be loaded on the returned usuarios model

        Returns
        -------
        prisma.models.usuarios
            The created usuarios record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a usuarios record from just the required fields
        usuarios = await usuarios.prisma().create(
            data={
                # data to create a usuarios record
                'nombre': 'bghfciaafe',
                'email': 'bgchfhgceh',
                'password': 'cafeiaccbc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.usuariosCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple usuarios records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of usuarios record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await usuarios.prisma().create_many(
            data=[
                {
                    # data to create a usuarios record
                    'nombre': 'gaddfhfh',
                    'email': 'gieegcbeg',
                    'password': 'bgcffadich',
                },
                {
                    # data to create a usuarios record
                    'nombre': 'fcbichhci',
                    'email': 'bcggadccgf',
                    'password': 'jdcfdcgc',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.usuariosWhereUniqueInput,
        include: Optional[types.usuariosInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single usuarios record.

        Parameters
        ----------
        where
            usuarios filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned usuarios model

        Returns
        -------
        prisma.models.usuarios
            The deleted usuarios record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        usuarios = await usuarios.prisma().delete(
            where={
                'id': 2053047983,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.usuariosWhereUniqueInput,
        include: Optional[types.usuariosInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique usuarios record.

        Parameters
        ----------
        where
            usuarios filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned usuarios model

        Returns
        -------
        prisma.models.usuarios
            The found usuarios record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        usuarios = await usuarios.prisma().find_unique(
            where={
                'id': 685333180,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.usuariosWhereUniqueInput,
        include: Optional[types.usuariosInclude] = None
    ) -> _PrismaModelT:
        """Find a unique usuarios record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            usuarios filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned usuarios model

        Returns
        -------
        prisma.models.usuarios
            The found usuarios record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        usuarios = await usuarios.prisma().find_unique_or_raise(
            where={
                'id': 127474245,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.usuariosWhereInput] = None,
        cursor: Optional[types.usuariosWhereUniqueInput] = None,
        include: Optional[types.usuariosInclude] = None,
        order: Optional[Union[types.usuariosOrderByInput, List[types.usuariosOrderByInput]]] = None,
        distinct: Optional[List[types.usuariosScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple usuarios records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of usuarios records returned
        skip
            Ignore the first N results
        where
            usuarios filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned usuarios model
        order
            Order the returned usuarios records by any field
        distinct
            Filter usuarios records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.usuarios]
            The list of all usuarios records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 usuarios records
        usuarios = await usuarios.prisma().find_many(take=10)

        # find the first 5 usuarios records ordered by the email field
        usuarios = await usuarios.prisma().find_many(
            take=5,
            order={
                'email': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.usuariosWhereInput] = None,
        cursor: Optional[types.usuariosWhereUniqueInput] = None,
        include: Optional[types.usuariosInclude] = None,
        order: Optional[Union[types.usuariosOrderByInput, List[types.usuariosOrderByInput]]] = None,
        distinct: Optional[List[types.usuariosScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single usuarios record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            usuarios filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned usuarios model
        order
            Order the returned usuarios records by any field
        distinct
            Filter usuarios records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.usuarios
            The first usuarios record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second usuarios record ordered by the password field
        usuarios = await usuarios.prisma().find_first(
            skip=1,
            order={
                'password': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.usuariosWhereInput] = None,
        cursor: Optional[types.usuariosWhereUniqueInput] = None,
        include: Optional[types.usuariosInclude] = None,
        order: Optional[Union[types.usuariosOrderByInput, List[types.usuariosOrderByInput]]] = None,
        distinct: Optional[List[types.usuariosScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single usuarios record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            usuarios filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned usuarios model
        order
            Order the returned usuarios records by any field
        distinct
            Filter usuarios records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.usuarios
            The first usuarios record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second usuarios record ordered by the fecha_creacion field
        usuarios = await usuarios.prisma().find_first_or_raise(
            skip=1,
            order={
                'fecha_creacion': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.usuariosUpdateInput,
        where: types.usuariosWhereUniqueInput,
        include: Optional[types.usuariosInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single usuarios record.

        Parameters
        ----------
        data
            usuarios record data specifying what to update
        where
            usuarios filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned usuarios model

        Returns
        -------
        prisma.models.usuarios
            The updated usuarios record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        usuarios = await usuarios.prisma().update(
            where={
                'id': 948921754,
            },
            data={
                # data to update the usuarios record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.usuariosWhereUniqueInput,
        data: types.usuariosUpsertInput,
        include: Optional[types.usuariosInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            usuarios filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned usuarios model

        Returns
        -------
        prisma.models.usuarios
            The created or updated usuarios record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        usuarios = await usuarios.prisma().upsert(
            where={
                'id': 1964990155,
            },
            data={
                'create': {
                    'id': 1964990155,
                    'nombre': 'fcbichhci',
                    'email': 'bcggadccgf',
                    'password': 'jdcfdcgc',
                },
                'update': {
                    'nombre': 'fcbichhci',
                    'email': 'bcggadccgf',
                    'password': 'jdcfdcgc',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.usuariosUpdateManyMutationInput,
        where: types.usuariosWhereInput,
    ) -> int:
        """Update multiple usuarios records

        Parameters
        ----------
        data
            usuarios data to update the selected usuarios records to
        where
            Filter to select the usuarios records to update

        Returns
        -------
        int
            The total number of usuarios records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all usuarios records
        total = await usuarios.prisma().update_many(
            data={
                'id': 1228891816
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.usuariosWhereInput] = None,
        cursor: Optional[types.usuariosWhereUniqueInput] = None,
    ) -> int:
        """Count the number of usuarios records present in the database

        Parameters
        ----------
        select
            Select the usuarios fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            usuarios filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.usuariosCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await usuarios.prisma().count()

        # results: prisma.types.usuariosCountAggregateOutput
        results = await usuarios.prisma().count(
            select={
                '_all': True,
                'nombre': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.usuariosCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.usuariosWhereInput] = None,
        cursor: Optional[types.usuariosWhereUniqueInput] = None,
    ) -> types.usuariosCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.usuariosCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.usuariosWhereInput] = None,
        cursor: Optional[types.usuariosWhereUniqueInput] = None,
    ) -> Union[int, types.usuariosCountAggregateOutput]:
        """Count the number of usuarios records present in the database

        Parameters
        ----------
        select
            Select the usuarios fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            usuarios filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.usuariosCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await usuarios.prisma().count()

        # results: prisma.types.usuariosCountAggregateOutput
        results = await usuarios.prisma().count(
            select={
                '_all': True,
                'email': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.usuariosCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.usuariosWhereInput] = None
    ) -> int:
        """Delete multiple usuarios records.

        Parameters
        ----------
        where
            Optional usuarios filter to find the records to be deleted

        Returns
        -------
        int
            The total number of usuarios records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all usuarios records
        total = await usuarios.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.usuariosScalarFieldKeysT'],
        *,
        where: Optional['types.usuariosWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.usuariosAvgAggregateInput'] = None,
        sum: Optional['types.usuariosSumAggregateInput'] = None,
        min: Optional['types.usuariosMinAggregateInput'] = None,
        max: Optional['types.usuariosMaxAggregateInput'] = None,
        having: Optional['types.usuariosScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.usuariosCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.usuariosScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.usuariosScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.usuariosGroupByOutput']:
        """Group usuarios records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar usuarios fields to group records by
        where
            usuarios filter to select records
        take
            Limit the maximum number of usuarios records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.usuariosGroupByOutput]
            A list of dictionaries representing the usuarios record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group usuarios records by password values
        # and count how many records are in each group
        results = await usuarios.prisma().group_by(
            ['password'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models